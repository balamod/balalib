on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4.2.1
      - name: ‚öôÔ∏è Install Rust
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          override: true
      - name: ‚öôÔ∏è Init GitHub check
        uses: LouisBrunner/checks-action@v2.0.0
        id: init
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Check for errors
          status: in_progress
      - name: ‚úÖ Check for errors
        run: cargo check

      - name: ‚öôÔ∏è Update GitHub check
        uses: LouisBrunner/checks-action@v2.0.0
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ steps.init.outputs.check_id }}
          conclusion: ${{ job.status }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4.2.1
      - name: ‚öôÔ∏è Install Rust
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          override: true
      - name: ‚öôÔ∏è Init GitHub check
        uses: LouisBrunner/checks-action@v2.0.0
        id: init
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Check linting
          status: in_progress
      - name: ‚úÖ Check linting
        run: cargo clippy --message-format human --all

      - name: ‚öôÔ∏è Update GitHub check
        uses: LouisBrunner/checks-action@v2.0.0
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ steps.init.outputs.check_id }}
          conclusion: ${{ job.status }}

  format:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4.2.1

      - name: ‚öôÔ∏è Install Rust
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          override: true

      - name: ‚öôÔ∏è Init GitHub check
        uses: LouisBrunner/checks-action@v2.0.0
        id: init
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Check formatting
          status: in_progress

      - name: ‚úÖ Check formatting
        run: cargo fmt --check --message-format human --all

      - name: ‚öôÔ∏è Update GitHub check
        uses: LouisBrunner/checks-action@v2.0.0
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ steps.init.outputs.check_id }}
          conclusion: ${{ job.status }}
  test:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4.2.1

      - name: Init check
        uses: LouisBrunner/checks-action@v2.0.0
        id: init
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Run tests with coverage
          status: in_progress

      - name: ‚öôÔ∏è Install Rust
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          override: true

      - name: ‚öôÔ∏è Install grcov
        run: cargo install grcov

      - name: ‚öôÔ∏è Install llvm-tools-preview
        run: rustup component add llvm-tools-preview

      - name: ‚úÖ Run tests with coverage
        run: |
          mkdir -p target/coverage
          CARGO_INCREMENTAL=0 RUSTFLAGS='-Cinstrument-coverage' LLVM_PROFILE_FILE='cargo-test-%p-%m.profraw' cargo test
          grcov . --binary-path ./target/debug/deps/ -s . -t lcov --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o target/coverage/tests.lcov

      - name: üìù Comment Code Coverage Report
        uses: romeovs/lcov-reporter-action@v0.4.0
        with:
          lcov-file: target/coverage/tests.lcov

      - name: ‚öôÔ∏è Update GitHub check
        uses: LouisBrunner/checks-action@v2.0.0
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ steps.init.outputs.check_id }}
          conclusion: ${{ job.status }}
